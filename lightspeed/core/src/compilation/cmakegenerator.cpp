#include "../../include/cmakegenerator.h"

CMakeGenerator::CMakeGenerator(EState* env) {
    this->env = env;
}

void CMakeGenerator::compile()
{
    //Get all linked libraries
    //env->validate_all_deps_built(); //TODO: Handle in get_linked_library_paths
    auto linked_libraries = env->get_linked_library_paths();
    
    //Get CMake version required
    std::string cmake_v = env->get_req_cmake_version();
    
    //Get project name
    std::string proj_name = "TestProject";//std::get<0>(env->get_state()); //First item in tuple is project name
    
    //Get exports
    auto exports = env->get_exports();
    
    // Now we finally start building the file
    std::string result;
    result += "# Auto-generated by LightSpeed: https://github.com/JacksonCoder/LightSpeed\n";
    result += "# For project: " + proj_name + "\n";
    result += "cmake_minimum_required (VERSION " + cmake_v + ")\n\n";
    result += "set(LS_LIBRARIES ";
    for(auto l : linked_libraries) {
        result += "${CMAKE_CURRENT_SOURCE_DIR}/" + l + " ";
    }
    result += ")\n";
    
    
    this->output = result;
}

std::string CMakeGenerator::get_output()
{
    return output;
}
